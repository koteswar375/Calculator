{"version":3,"sources":["components/Button.jsx","components/Input.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","props","classes","children","push","onClick","clickHandler","className","join","Input","input","App","updateInput","val","setState","state","clearInput","evaluateResult","result","expression","replace","evaluate","pow","String","alert","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAceA,G,YAXA,SAACC,GACZ,IAAMC,EAAU,CAAC,cAGjB,MAFsB,MAAnBD,EAAME,UAAuC,MAAnBF,EAAME,UAAuC,MAAnBF,EAAME,UAAuC,MAAnBF,EAAME,UACpFD,EAAQE,KAAK,YAEZ,yBAAKC,QAAS,kBAAOJ,EAAMK,aAAaL,EAAME,WAAWI,UAAWL,EAAQM,KAAK,MAC5EP,EAAME,YCJJM,G,MAFD,SAACR,GAAD,OAAY,yBAAKM,UAAU,SAASN,EAAMS,S,eCoFzCC,E,YA/Eb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KAMRW,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEJ,MAAO,EAAKK,MAAML,MAAQG,KARzB,EAWnBG,WAAa,WACX,EAAKF,SAAS,CAAEJ,MAAO,MAZN,EAenBO,eAAiB,SAACJ,GAChB,IAAIK,EACAC,EAAa,EAAKJ,MAAML,MAAMU,QAAQ,KAAM,KAChD,IACE,OAAQP,GACN,IAAK,IACHK,EAASG,YAASF,GAClB,MACF,IAAK,MACHD,EAA8B,IAApB,EAAKH,MAAML,MAAeW,YAAS,EAAIF,GAAc,EAC/D,MACF,IAAK,MACHD,EAASI,aAAIH,EAAW,GAE5B,EAAKL,SAAS,CAAEJ,MAAOa,OAAOL,KAEhC,SACEM,MAAM,wBACN,EAAKV,SAAS,CAAEJ,MAAO,OA/BzB,EAAKK,MAAQ,CACXL,MAAO,IAHQ,E,sEAqCT,IAAD,OACP,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAOG,MAAOe,KAAKV,MAAML,QACzB,yBAAKH,UAAU,OACb,kBAAC,EAAD,CAASD,aAAc,kBAAM,EAAKW,eAAe,SAAjD,IAA0D,mCAC1D,kBAAC,EAAD,CAAQX,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKR,gBAA3B,OACA,kBAAC,EAAD,CAAQX,aAAcmB,KAAKT,YAA3B,MAEF,yBAAKT,UAAU,OACb,kBAAC,EAAD,CAAQD,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,MAEF,yBAAKL,UAAU,OACb,kBAAC,EAAD,CAAQD,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,MAEF,yBAAKL,UAAU,OACb,kBAAC,EAAD,CAAQD,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,MAEF,yBAAKL,UAAU,OACb,kBAAC,EAAD,CAAQD,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKb,aAA3B,KACA,kBAAC,EAAD,CAAQN,aAAcmB,KAAKR,gBAA3B,KACA,kBAAC,EAAD,CAAQX,aAAcmB,KAAKb,aAA3B,Y,GAvEMc,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a01d99d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = (props) => {\r\n    const classes = [\"btn-custom\"];\r\n    if(props.children === '+' || props.children === '-' || props.children === 'x' || props.children === '/')\r\n       classes.push('operator');\r\n    return (\r\n        <div onClick={( ) => props.clickHandler(props.children)} className={classes.join(' ')}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = (props) => (<div className='input'>{props.input}</div>)\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport Button from './components/Button.jsx';\r\nimport Input from './components/Input';\r\nimport { evaluate,pow } from 'mathjs';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: ''\r\n    }\r\n  }\r\n\r\n  updateInput = (val) => {\r\n    this.setState({ input: this.state.input + val });\r\n  }\r\n\r\n  clearInput = () => {\r\n    this.setState({ input: '' });\r\n  }\r\n\r\n  evaluateResult = (val) => {\r\n    let result;\r\n    let expression = this.state.input.replace(/x/g, '*');\r\n    try {\r\n      switch (val) {\r\n        case '=':\r\n          result = evaluate(expression);\r\n          break;\r\n        case '1/x':\r\n          result = (this.state.input != '') ? evaluate(1 / expression) : 0;\r\n          break;\r\n        case 'x^2':\r\n          result = pow(expression,2);\r\n      }\r\n      this.setState({ input: String(result) });\r\n    }\r\n    catch {\r\n      alert('Incorrect expression');\r\n      this.setState({ input: '' });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <Input input={this.state.input}></Input>\r\n          <div className=\"row\">\r\n            <Button  clickHandler={() => this.evaluateResult('x^2')}>x<sup>2</sup></Button>\r\n            <Button clickHandler={this.updateInput}>%</Button>\r\n            <Button clickHandler={this.evaluateResult}>1/x</Button>\r\n            <Button clickHandler={this.clearInput}>C</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button clickHandler={this.updateInput}>8</Button>\r\n            <Button clickHandler={this.updateInput}>7</Button>\r\n            <Button clickHandler={this.updateInput}>9</Button>\r\n            <Button clickHandler={this.updateInput}>+</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button clickHandler={this.updateInput}>4</Button>\r\n            <Button clickHandler={this.updateInput}>5</Button>\r\n            <Button clickHandler={this.updateInput}>6</Button>\r\n            <Button clickHandler={this.updateInput}>-</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button clickHandler={this.updateInput}>1</Button>\r\n            <Button clickHandler={this.updateInput}>2</Button>\r\n            <Button clickHandler={this.updateInput}>3</Button>\r\n            <Button clickHandler={this.updateInput}>x</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button clickHandler={this.updateInput}>.</Button>\r\n            <Button clickHandler={this.updateInput}>0</Button>\r\n            <Button clickHandler={this.evaluateResult}>=</Button>\r\n            <Button clickHandler={this.updateInput}>/</Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}